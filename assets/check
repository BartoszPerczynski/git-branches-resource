#!/bin/bash

set -euo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload="$(cat <&0)"

load_pubkey "$payload"
configure_https_tunnel "$payload"
configure_git_ssl_verification "$payload"
configure_credentials "$payload"

uri=$(jq -r '.source.uri // ""' <<< "$payload")
branch_regex=$(jq -r '.source.branch_regex // ""' <<< "$payload")
prev_branches=$(jq -r '.version.branches // ""' <<< "$payload")
git_config_payload=$(jq -r '.source.git_config // []' <<< "$payload")

configure_git_global "${git_config_payload}"

all_branches=$(git ls-remote --heads "$uri" | \
  cut -f2 | \
  sed -e 's|^refs/heads/||' | \
  sort)

# echo "$all_branches"

if [ -n "$branch_regex" ]; then
  filtered_branches=$(echo "$all_branches" | grep "$branch_regex")
else
  filtered_branches="$all_branches"
fi

cur_branches=$(jq -R -s -c 'split("\n") | map(select(length > 0))' <<< "$filtered_branches")
timestamp=$(date "+%Y-%m-%d %H:%M:%S")
cur_version=$(jq -n --argjson branches "$cur_branches" --arg timestamp "$timestamp" \
  '{branches: $branches | tostring, timestamp: $timestamp}')
prev_version=$(jq -r '.version' <<< "$payload")

if [ -z "$prev_branches" ]; then
  echo "[$cur_version]" >&3
else
  branches_eq=$(jq -n --argjson cur_branches "$cur_branches" --arg prev_branches "$prev_branches" \
    '$cur_branches == ($prev_branches | fromjson)')
  if [ "$branches_eq" = "true" ]; then
    jq -n --argjson payload "$payload" '[$payload.version]' >&3
  else
    jq -n --argjson payload "$payload" --argjson cur_version "$cur_version" '[$payload.version, $cur_version]' >&3
  fi
fi
